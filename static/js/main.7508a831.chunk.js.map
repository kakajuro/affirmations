{"version":3,"sources":["components/loadingSpinner.js","components/quote.js","components/gitIcon.js","App.js","components/funcs.js","index.js"],"names":["loadingSpinner","type","color","height","width","className","Quote","loadedQuote","GithubIcon","size","onClick","window","open","App","useState","quote","setQuote","isLoading","setIsLoading","useEffect","fetch","proxyurl","then","response","json","responseJSON","q","makeRequest","min","max","url","Math","ceil","floor","random","affirmation","catch","err","console","log","href","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAgBeA,MAZf,WACI,OACI,cAAC,IAAD,CACIC,KAAK,OACLC,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,UAAU,aCAPC,MARf,YAA+B,IAAfC,EAAc,EAAdA,YACZ,OACI,8BACI,oBAAIF,UAAU,cAAd,SAA6BE,O,OCW1BC,MARf,WACI,OACI,qBAAKH,UAAU,WAAf,SACI,cAAC,IAAD,CAAiBA,UAAU,UAAUI,KAAM,GAAIC,QAAS,WANhEC,OAAOC,KAAK,mDCyEDC,MAvEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEqBF,qBAFrB,mBAENG,EAFM,KAEKC,EAFL,KAIbC,qBAAU,WACRD,GAAa,GAIbE,MAAMC,oFACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIT,EAAS,gBAAkBS,EAAa,GAAGC,MAChEJ,MAAK,kBAAMJ,GAAa,QACxB,IAEH,IAAMS,EAAc,WAClBT,GAAa,GACb,ICzByBU,EAAKC,ED0BxBR,EAAW,qDACbS,EAAM,GAEA,KC7BeF,EDyBA,ECzBKC,EDyBF,ECxB5BD,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMF,KAAKG,UAAYL,EAAMD,EAAM,IAAMA,ID2BnDE,EAAM,2BACNV,MAAMC,EAAWS,GAChBR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIT,EAASS,EAAaU,gBAC3Cb,MAAK,kBAAMJ,GAAa,MACxBkB,OAAM,SAACC,GACNnB,GAAa,GACbF,EAAS,2BACTsB,QAAQC,IAAIF,QAGdnB,GAAa,GACbY,EAAM,kCACNV,MAAMC,EAAWS,GAChBR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAIT,EAASS,EAAa,GAAGC,MAC9CJ,MAAK,kBAAMJ,GAAa,MACxBkB,OAAM,SAACC,GACNrB,EAAS,2BACTsB,QAAQC,IAAIF,QAKlB,OACE,gCACE,wBAAQhC,UAAU,UAAlB,SACE,cAAC,EAAD,MAEJ,sBAAKA,UAAU,cAAf,UACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,QAAf,SACGY,EAAY,cAAC,EAAD,IAAqB,cAAC,EAAD,CAAOV,YAAaQ,MAExD,wBACEV,UAAU,MACVK,QAAS,kBAAMiB,KAFjB,yBAMF,qBAAKtB,UAAU,UAAf,SACE,kEAAoC,mBAAGmC,KAAK,wBAAwBC,OAAO,SAAvC,4BAApC,QAA2G,mBAAGD,KAAK,8CAAR,0CElEnHE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.7508a831.chunk.js","sourcesContent":["import React from 'react';\r\nimport Loader from \"react-loader-spinner\";\r\nimport './components.css'\r\n\r\nfunction loadingSpinner() {\r\n    return (\r\n        <Loader\r\n            type=\"Oval\"\r\n            color=\"#5196f0\"\r\n            height={50}\r\n            width={50}\r\n            className=\"spinner\"\r\n        />\r\n    );\r\n}\r\n\r\nexport default loadingSpinner;","import React from 'react';\r\nimport './components.css';\r\n\r\nfunction Quote({loadedQuote}) {\r\n    return (\r\n        <div>\r\n            <h1 className=\"affirmation\">{loadedQuote}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quote;","import React from 'react';\r\nimport { AiOutlineGithub } from 'react-icons/ai';\r\n\r\nimport './components.css'\r\n\r\nconst buttonClicked = () => {\r\n    window.open('https://github.com/swishyDev/affirmations');\r\n}\r\n\r\nfunction GithubIcon() {\r\n    return (\r\n        <div className='icon-div'>\r\n            <AiOutlineGithub className=\"gitIcon\" size={40} onClick={() => buttonClicked()}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GithubIcon;","import React, { useState, useEffect } from 'react'\nimport './App.css';\n\nimport LoadingSpinner from './components/loadingSpinner';\nimport Quote from './components/quote';\nimport GithubIcon from './components/gitIcon';\nimport { getRandomInt } from \"./components/funcs\";\n\nfunction App() {\n  const [quote, setQuote] = useState(\"\");\n  const [isLoading, setIsLoading] = useState();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const proxyurl = \"https://fathomless-brushlands-29705.herokuapp.com/\";\n    const url = \"https://zenquotes.io/api/today\";\n\n    fetch(proxyurl + url)\n    .then(response => response.json())\n    .then(responseJSON => setQuote(\"Daily Quote: \" + responseJSON[0].q))\n    .then(() => setIsLoading(false))\n  }, [])\n\n  const makeRequest = () => {\n    setIsLoading(true);\n    const int = getRandomInt(1, 2);\n    const proxyurl = \"https://fathomless-brushlands-29705.herokuapp.com/\";\n    var url = \"\";\n\n    if (int===1) {\n      url = \"https://affirmations.dev\";\n      fetch(proxyurl + url) \n      .then(response => response.json())\n      .then(responseJSON => setQuote(responseJSON.affirmation))\n      .then(() => setIsLoading(false))\n      .catch((err) => {\n        setIsLoading(false);\n        setQuote(\"Unable to access quote.\")\n        console.log(err)\n      })\n    } else {\n      setIsLoading(true);\n      url = \"https://zenquotes.io/api/random\"; \n      fetch(proxyurl + url) \n      .then(response => response.json())\n      .then(responseJSON => setQuote(responseJSON[0].q))\n      .then(() => setIsLoading(false))\n      .catch((err) => {\n        setQuote(\"Unable to access quote.\")\n        console.log(err)\n      })\n    }\n  }\n\n  return (\n    <div>\n      <header className=\"heading\">\n        <GithubIcon />\n      </header>\n    <div className=\"main-window\">\n      <div className=\"container\">\n        <div className=\"quote\">\n          {isLoading ? <LoadingSpinner /> : <Quote loadedQuote={quote}/>}\n        </div>\n        <button\n          className=\"btn\"\n          onClick={() => makeRequest()}\n        >Generate</button>\n      </div>\n\n      <div className=\"credits\">\n        <p>Inspirational quotes provided by <a href=\"https://zenquotes.io/\" target=\"_blank\"> ZenQuotes API</a> and <a href=\"https://github.com/annthurium/affirmations/\">affirmations.dev</a>\n        </p>\n      </div>\n    </div>\n  </div>\n  );\n}\n\nexport default App;","export function getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}